const User = require('./../models/User');
const Room = require('./../models/Room');
const Message = require('./../models/Message');

const passport = require('./../middleware/passport');

var count = 0;

var ioEvents = function(io) {
    io.on('connection', function(socket){
        /**
         * Event only for admin identify: if user loged in allow chat else show popup login
         * if user loged in => exist socket.request.user
         */
        var token = socket.handshake.query.token;
        passport.jwtVerifyToken(token, user => {
            if (user && user.id) {
                /**
                 * Change socket id was generated by server to user Id
                 */
                let uRooms = user.rooms;
                /**
                 * Join this room: using case 1 account login in many device
                 */
                socket.join(user.id);
                /**
                 * Join customer care room in order to reply customer's messages
                 */
                for(let i=0; i<uRooms.length; i++) {
                    socket.join(uRooms[i]);
                }
                /**
                 * Notification join chat success
                 */
                socket.emit('join_chat_successfully', {
                    room: user.id,
                    userName: user.userName
                });
            } else {
                console.log('client auth failed and server auto disconnected');
                socket.emit('authenticate_failed');
                socket.disconnect(true);
            }
        })
        /**
         * Event send message
         */
        socket.on('send_message', (data) => {
            console.log('data', data.sender.room);
            /**
             * Send message to recipient
             */
            
            io.to(data.to.room).emit('message', data);

            /**
             * Save message to database
             */
            let newMessage = new Message();
            newMessage.sender = data.sender.room;
            newMessage.recipient = data.to.room;
            newMessage.messageContent = data.messageContent;
            newMessage.status = 1;

            newMessage.save((err, newMessage) => {
                if (err) {
                    console.log(err);
                } else {
                    /**
                     * Send message to sender in order to confirm message send successfully
                     */
                    io.to(data.sender.room).emit('owner_message', data);
                }
            });
        })
        /**
         * Event client disconnect
         */
        socket.on('disconnect', () => {
            console.log('reason');
        });
    });
}

module.exports = ioEvents;